AWSTemplateFormatVersion: 2010-09-09

Resources:

  S3Web:
    Type: 'AWS::S3::Bucket'
    Properties: 
      AccessControl: PublicRead
      BucketName: test.yetanotherwhatever.io
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  LambdaInviteUser:
    Type: "AWS::Lambda::Function"
    Properties: 
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Description: invite candidate, create dynamic, temporary coding exercise page.
      FunctionName: Ocpv2InviteCandidate
      Handler: com.yetanotherwhatever.ocpv2.lambdas.InviteCandidateHandler::handleRequest
      MemorySize: 256
      #TODO create lambda role using CF
      Role: arn:aws:iam::229763884986:role/CodingProblemRegistration
      Runtime: java8
      Timeout: 10

  #
  # API Gateway settings
  #
  OCPv2API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "OCPv2"
      FailOnWarnings: "true"
  InvitationResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - "OCPv2API"
          - "RootResourceId"
      PathPart: "invitation"
      RestApiId:
        Ref: OCPv2API
    DependsOn : OCPv2API
  InviteCandidateMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ResourceId:
        Ref: InvitationResource
      RestApiId:
        Ref: OCPv2API
      Integration:
        Type: "AWS"
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - !Ref "AWS::Region"
              - ":lambda:path/"
              - "/2015-03-31/functions/"
              - !GetAtt [LambdaInviteUser, Arn]
              - "/invocations"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
        - StatusCode : 200
      MethodResponses:
      - StatusCode: 200 
    DependsOn : InvitationResource

  RedirectPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaInviteUser
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${OCPv2API}/*

  # API gateway stage and deployment configuration. We use a new logical ID for the deployment each time we update the
  # CF template; this is because the deployment captures the current state of the resource and method tree at the time
  # it is created, so to reflect any changes it needs to be recreated and the new deployment bound to the stage.
  OCPv2APIStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref OCPv2API
      DeploymentId: !Ref OCPv2APIDeploymentStage
      StageName: test
      MethodSettings:
          - ResourcePath: /*
            HttpMethod: '*'
            DataTraceEnabled: true
            LoggingLevel: INFO
            MetricsEnabled: true          
    DependsOn : OCPv2APIDeploymentStage

  OCPv2APIDeploymentStage:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref OCPv2API
    DependsOn :
    # This DependsOn relation ensures that we don't create the deployment before we finish configuring the resources;
    # otherwise the deployment might capture an incomplete configuration.
      - InviteCandidateMethod

Outputs:
  WebsiteURL:
    Value: !GetAtt [S3Web, WebsiteURL]
    Description: URL for website hosted on S3
  RestAPIID:
    Value: !Ref OCPv2API
    Description: root resource ID of the REST API
