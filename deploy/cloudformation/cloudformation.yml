AWSTemplateFormatVersion: 2010-09-09


##TODO parameters for
## environment/stack name
## hosted zone
## s3UploadUser, for granting permissions to S3Upload Bucket


Resources:

  #######################################
  #       S3 
  #######################################
  S3Web:
    Type: 'AWS::S3::Bucket'
    Properties: 
      AccessControl: PublicRead
      BucketName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - yetanotherwhatever.io
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  S3UploadBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn: 
      - LambdaOutputUploaded
      - S3InvokeLambdaOutputUploadedPermission
    Properties:
      BucketName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - upload
            - yetanotherwhatever.io
      NotificationConfiguration:
        LambdaConfigurations:             
          - Function: 
              Fn::GetAtt: [LambdaOutputUploaded, Arn]
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'uploads/output/'
          - Function: 
              Fn::GetAtt: [LambdaCodeUploaded, Arn]
            Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'uploads/code/'



  #######################################
  #       Permissions & Roles
  #######################################

  S3InvokeLambdaOutputUploadedPermission: 
      Type: AWS::Lambda::Permission
      DependsOn:  LambdaOutputUploaded 
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: 
          Fn::GetAtt: [LambdaOutputUploaded, Arn]
        Principal: s3.amazonaws.com
        SourceAccount: 
          Ref: AWS::AccountId
        SourceArn: 
          !Join
            - ''
            - - "arn:aws:s3:::"
              -
                !Join
                  - '.'
                  - - !Ref AWS::StackName
                    - upload
                    - yetanotherwhatever.io

  S3InvokeLambdaCodeUploadedPermission: 
      Type: AWS::Lambda::Permission
      DependsOn:  LambdaCodeUploaded 
      Properties: 
        Action: lambda:InvokeFunction
        FunctionName: 
          Fn::GetAtt: [LambdaCodeUploaded, Arn]
        Principal: s3.amazonaws.com
        SourceAccount: 
          Ref: AWS::AccountId
        SourceArn: 
          !Join
            - ''
            - - "arn:aws:s3:::"
              -
                !Join
                  - '.'
                  - - !Ref AWS::StackName
                    - upload
                    - yetanotherwhatever.io

  RedirectPermissionsInvitations:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaInviteUser
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${OCPv2API}/*

  RedirectPermissionsResults:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaGetTestOutputResult
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${OCPv2API}/*/*"


  LambdaRole: 
      Type: "AWS::IAM::Role"
      Properties: 
        RoleName: 
          !Join
            - '.'
            - - ocpv2
              - !Ref AWS::StackName
              - lambda
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Effect: "Allow"
              Principal: 
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Path: "/"
        Policies: 
          - 
            PolicyName: "root"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action: "*"
                  Resource: "*"


  #######################################
  #       DynamoDB 
  #######################################

  InviteTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "ManagerEmail"
          AttributeType: "S"
        - AttributeName: "ProblemPageGuid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ProblemPageGuid"
          KeyType: "HASH"
      TableName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - Candidate_Invitations
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: "Manager_Invites"
          KeySchema:
            - AttributeName: "ManagerEmail"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  
  OutputUploadedTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "UploadId"
          AttributeType: "S"
        - AttributeName: "ProblemPageGuid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "UploadId"
          KeyType: "HASH"
      TableName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - Output_Uploads
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: "Manager_Invites"
          KeySchema:
            - AttributeName: "ProblemPageGuid"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5


  #######################################
  #       Lambda 
  #######################################
  LambdaInviteUser:
    Type: "AWS::Lambda::Function"
    DependsOn : LambdaRole
    Properties: 
      FunctionName: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - InviteCandidate
      Description: invite candidate, create dynamic, temporary coding exercise page.
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Handler: com.yetanotherwhatever.ocpv2.aws.InviteCandidateHandler::handleRequest
      MemorySize: 256
      Role: 
        !Join
          - '/'
          - - !Sub arn:aws:iam::${AWS::AccountId}:role
            - 
              !Join
                - '.'
                - - ocpv2
                  - !Ref AWS::StackName
                  - lambda
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          S3_WEB_BUCKET: 
            !Join
              - '.'
              - - !Ref AWS::StackName
                - yetanotherwhatever.io
          DYNAMODB_INVITE_TABLE:             
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Candidate_Invitations

  LambdaOutputUploaded:
    Type: "AWS::Lambda::Function"
    DependsOn : LambdaRole
    Properties: 
      FunctionName: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - TestOutput
      Description: check uploaded output against expected, save results for candidate, save results for manager
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Handler: com.yetanotherwhatever.ocpv2.aws.OutputUploadedHandler::handleRequest
      MemorySize: 256
      Role: 
        !Join
          - '/'
          - - !Sub arn:aws:iam::${AWS::AccountId}:role
            - 
              !Join
                - '.'
                - - ocpv2
                  - !Ref AWS::StackName
                  - lambda
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_INVITE_TABLE:             
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Candidate_Invitations
          DYNAMODB_OUTPUT_UPLOADS_TABLE:
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Output_Uploads
          S3_WEB_BUCKET:
            !Join
              - '.'
              - - !Ref AWS::StackName
                - yetanotherwhatever.io
            

  LambdaCodeUploaded:
    Type: "AWS::Lambda::Function"
    DependsOn : LambdaRole
    Properties: 
      FunctionName: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - NotifyCodeUploaded
      Description: notify hiring manager of solution upload, with link to .zip
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Handler: com.yetanotherwhatever.ocpv2.aws.CodeUploadedHandler::handleRequest
      MemorySize: 256
      Role: 
        !Join
          - '/'
          - - !Sub arn:aws:iam::${AWS::AccountId}:role
            - 
              !Join
                - '.'
                - - ocpv2
                  - !Ref AWS::StackName
                  - lambda
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_INVITE_TABLE:             
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Candidate_Invitations

  LambdaGetTestOutputResult:
    Type: "AWS::Lambda::Function"
    DependsOn : LambdaRole
    Properties: 
      FunctionName: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - GetTestOutputResult
      Description: invite candidate, create dynamic, temporary coding exercise page.
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Handler: com.yetanotherwhatever.ocpv2.aws.GetOutputTestResultsHandler::handleRequest
      MemorySize: 256
      Role: 
        !Join
          - '/'
          - - !Sub arn:aws:iam::${AWS::AccountId}:role
            - 
              !Join
                - '.'
                - - ocpv2
                  - !Ref AWS::StackName
                  - lambda
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_OUTPUT_UPLOADS_TABLE:
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Output_Uploads


  #########################################
  #       API Gateway 
  #########################################

  OCPv2API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - OCPv2
      FailOnWarnings: "true"


  #################  INVITATION RESOURCE AND METHODS #################
  InvitationResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - "OCPv2API"
          - "RootResourceId"
      PathPart: "invitation"
      RestApiId:
        Ref: OCPv2API
    DependsOn : OCPv2API

  InviteCandidateMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn : 
      - InvitationResource
      - LambdaInviteUser
    Properties:
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ResourceId:
        Ref: InvitationResource
      RestApiId:
        Ref: OCPv2API
      Integration:
        Type: "AWS"
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - !Ref "AWS::Region"
              - ":lambda:path/"
              - "/2015-03-31/functions/"
              - !GetAtt [LambdaInviteUser, Arn]
              - "/invocations"
        IntegrationHttpMethod: "POST"
        RequestParameters:
          "integration.request.header.X-Amz-Invocation-Type": "'Event'"
        IntegrationResponses: 
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              text/html: ''
            StatusCode : 200
      MethodResponses:
          - ResponseModels:
              text/html: Empty
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: 200 

  #Enable CORS
  InviteCandidateCORSOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn : InvitationResource
    Properties:
      ResourceId: !Ref InvitationResource
      RestApiId: !Ref OCPv2API
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'


  #################  RESULTS RESOURCE AND METHODS #################
  TestOutputResultResource:
    Type: "AWS::ApiGateway::Resource"
    DependsOn : OCPv2API
    Properties:
      ParentId:
        Fn::GetAtt:
          - "OCPv2API"
          - "RootResourceId"
      PathPart: "outputtestresult"
      RestApiId:
        Ref: OCPv2API

  TestOutputResultOutputIdResource:
    Type: "AWS::ApiGateway::Resource"
    DependsOn : TestOutputResultResource
    Properties:
      ParentId: !Ref TestOutputResultResource
      PathPart: "{outputid}"
      RestApiId:
        Ref: OCPv2API

  TestOutputResultMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: 
      - TestOutputResultOutputIdResource
      - LambdaGetTestOutputResult
    Properties:
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ResourceId:
        Ref: TestOutputResultOutputIdResource
      RestApiId:
        Ref: OCPv2API
      Integration:
        Type: "AWS_PROXY"
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - !Ref "AWS::Region"
              - ":lambda:path/"
              - "/2015-03-31/functions/"
              - !GetAtt [LambdaGetTestOutputResult, Arn]
              - "/invocations"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode : 200
      MethodResponses:
          - ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: 200 

  #Enable CORS
  TestOutputResultCORSOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn : TestOutputResultOutputIdResource
    Properties:
      ResourceId: !Ref TestOutputResultOutputIdResource
      RestApiId: !Ref OCPv2API
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'


  # API gateway stage and deployment configuration. 
  # We use a new logical ID for the deployment each time we update the CF template
  # this is because the deployment captures the current state of the resource and method tree at the time it is created, 
  # so to reflect any changes it needs to be recreated and the new deployment bound to the stage.
  OCPv2APIStage:
    Type: 'AWS::ApiGateway::Stage'
    DependsOn : OCPv2APIDeploymentStage1
    Properties:
      RestApiId: !Ref OCPv2API
      DeploymentId: !Ref OCPv2APIDeploymentStage1
      StageName: !Ref AWS::StackName
      MethodSettings:
          - ResourcePath: /*
            HttpMethod: '*'
            DataTraceEnabled: true
            LoggingLevel: INFO
            MetricsEnabled: true          

  #update/modify logical name to triger new deployment  
  OCPv2APIDeploymentStage1:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref OCPv2API
    DependsOn :
    # This DependsOn relation ensures that we don't create the deployment before we finish configuring the resources;
    # otherwise the deployment might capture an incomplete configuration.
      - InviteCandidateMethod






      


Outputs:
  WebsiteURL:
    Value: !GetAtt [S3Web, WebsiteURL]
    Description: URL for website hosted on S3
  RestAPIID:
    Value: !Ref OCPv2API
    Description: root resource ID of the REST API
