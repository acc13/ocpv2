AWSTemplateFormatVersion: 2010-09-09


##TODO parameters for
## environment/stack name
## hosted zone
## s3UploadUser, for granting permissions to S3Upload Bucket


Resources:

  #######################################
  #       S3 
  #######################################
  S3Web:
    Type: 'AWS::S3::Bucket'
    Properties: 
      AccessControl: PublicRead
      BucketName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - yetanotherwhatever.io
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html

  S3Upload:
    Type: 'AWS::S3::Bucket'
    Properties: 
      AccessControl: Private
      BucketName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - upload
            - yetanotherwhatever.io
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt LambdaOutputUploaded.Arn
            Event: "s3:ObjectCreated:*"
            Filter:
              S3Key:
                Rules:
                  -
                    Name: prefix
                    Value: uploads/output
      #TODO inline policy for s3 upload user
    DependsOn : [LambdaOutputUploaded, S3InvokeLambdaPermission]


  S3InvokeLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaOutputUploaded
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceArn: 
        !Join
          - ''
          - - arn:aws:s3:::mybucketname
            -
              !Join
                - '.'
                - - !Ref AWS::StackName
                  - upload
                  - yetanotherwhatever.io


  #######################################
  #       DynamoDB 
  #######################################
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "ManagerEmail"
          AttributeType: "S"
        - AttributeName: "ProblemPageGuid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ProblemPageGuid"
          KeyType: "HASH"
      TableName: 
        !Join
          - '.'
          - - !Ref AWS::StackName
            - Candidate_Invitations
      GlobalSecondaryIndexes:
        - IndexName: "Manager_Invites"
          KeySchema:
            - AttributeName: "ManagerEmail"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5




  #######################################
  #       Lambda 
  #######################################
  LambdaInviteUser:
    Type: "AWS::Lambda::Function"
    Properties: 
      #TODO test stack name disambiguation
      FunctionName: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - InviteCandidate
      Description: invite candidate, create dynamic, temporary coding exercise page.
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Handler: com.yetanotherwhatever.ocpv2.lambdas.InviteCandidateHandler::handleRequest
      MemorySize: 256
      #TODO create lambda role using CF
      Role: arn:aws:iam::229763884986:role/CodingProblemRegistration
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          S3_WEB_BUCKET: 
            !Join
              - '.'
              - - !Ref AWS::StackName
                - yetanotherwhatever.io
          DYNAMODB_INVITE_TABLE:             
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Candidate_Invitations

  LambdaOutputUploaded:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: 
        !Join
          - '_'
          - - !Ref AWS::StackName
            - TestOutput
      Description: check uploaded output against expected, save results for candidate, save results for manager
      Code: 
        S3Bucket: deployocp
        S3Key: lambas/InviteCandidate-1.0.zip
      Handler: com.yetanotherwhatever.ocpv2.lambdas.OutputUploadedHandler::handleRequest
      MemorySize: 256
      #TODO create lambda role using CF
      Role: arn:aws:iam::229763884986:role/testOutputUploadRole
      Runtime: java8
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_OUTPUT_UPLOADS_TABLE:
            !Join
              - '.'
              - - !Ref AWS::StackName
                - Output_Uploads







  #########################################
  #       API Gateway 
  #########################################
  
  OCPv2API:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "OCPv2"
      FailOnWarnings: "true"

  InvitationResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId:
        Fn::GetAtt:
          - "OCPv2API"
          - "RootResourceId"
      PathPart: "invitation"
      RestApiId:
        Ref: OCPv2API
    DependsOn : OCPv2API

  InviteCandidateMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      HttpMethod: "POST"
      AuthorizationType: "NONE"
      ResourceId:
        Ref: InvitationResource
      RestApiId:
        Ref: OCPv2API
      Integration:
        Type: "AWS"
        Uri:
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:"
              - !Ref "AWS::Region"
              - ":lambda:path/"
              - "/2015-03-31/functions/"
              - !GetAtt [LambdaInviteUser, Arn]
              - "/invocations"
        IntegrationHttpMethod: "POST"
        IntegrationResponses: 
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode : 200
      MethodResponses:
          - ResponseModels:
              application/json: Empty
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
            StatusCode: 200 
    DependsOn : InvitationResource

  #Enable CORS
  InviteCandidateCORSOptionsMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ResourceId: !Ref InvitationResource
      RestApiId: !Ref OCPv2API
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

  RedirectPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaInviteUser
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${OCPv2API}/*

  # API gateway stage and deployment configuration. We use a new logical ID for the deployment each time we update the
  # CF template; this is because the deployment captures the current state of the resource and method tree at the time
  # it is created, so to reflect any changes it needs to be recreated and the new deployment bound to the stage.
  OCPv2APIStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      RestApiId: !Ref OCPv2API
      DeploymentId: !Ref OCPv2APIDeploymentStage
      StageName: test
      MethodSettings:
          - ResourcePath: /*
            HttpMethod: '*'
            DataTraceEnabled: true
            LoggingLevel: INFO
            MetricsEnabled: true          
    DependsOn : OCPv2APIDeploymentStage

  OCPv2APIDeploymentStage:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref OCPv2API
    DependsOn :
    # This DependsOn relation ensures that we don't create the deployment before we finish configuring the resources;
    # otherwise the deployment might capture an incomplete configuration.
      - InviteCandidateMethod






      


Outputs:
  WebsiteURL:
    Value: !GetAtt [S3Web, WebsiteURL]
    Description: URL for website hosted on S3
  RestAPIID:
    Value: !Ref OCPv2API
    Description: root resource ID of the REST API
